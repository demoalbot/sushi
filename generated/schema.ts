// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Bar extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Bar entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Bar entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Bar", id.toString(), this);
  }

  static load(id: string): Bar | null {
    return store.get("Bar", id) as Bar | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get ratio(): BigDecimal {
    let value = this.get("ratio");
    return value.toBigDecimal();
  }

  set ratio(value: BigDecimal) {
    this.set("ratio", Value.fromBigDecimal(value));
  }

  get xSushiMinted(): BigDecimal {
    let value = this.get("xSushiMinted");
    return value.toBigDecimal();
  }

  set xSushiMinted(value: BigDecimal) {
    this.set("xSushiMinted", Value.fromBigDecimal(value));
  }

  get xSushiBurned(): BigDecimal {
    let value = this.get("xSushiBurned");
    return value.toBigDecimal();
  }

  set xSushiBurned(value: BigDecimal) {
    this.set("xSushiBurned", Value.fromBigDecimal(value));
  }

  get sushiStaked(): BigDecimal {
    let value = this.get("sushiStaked");
    return value.toBigDecimal();
  }

  set sushiStaked(value: BigDecimal) {
    this.set("sushiStaked", Value.fromBigDecimal(value));
  }

  get sushiStakedUSD(): BigDecimal {
    let value = this.get("sushiStakedUSD");
    return value.toBigDecimal();
  }

  set sushiStakedUSD(value: BigDecimal) {
    this.set("sushiStakedUSD", Value.fromBigDecimal(value));
  }

  get sushiHarvested(): BigDecimal {
    let value = this.get("sushiHarvested");
    return value.toBigDecimal();
  }

  set sushiHarvested(value: BigDecimal) {
    this.set("sushiHarvested", Value.fromBigDecimal(value));
  }

  get sushiHarvestedUSD(): BigDecimal {
    let value = this.get("sushiHarvestedUSD");
    return value.toBigDecimal();
  }

  set sushiHarvestedUSD(value: BigDecimal) {
    this.set("sushiHarvestedUSD", Value.fromBigDecimal(value));
  }

  get xSushiAge(): BigDecimal {
    let value = this.get("xSushiAge");
    return value.toBigDecimal();
  }

  set xSushiAge(value: BigDecimal) {
    this.set("xSushiAge", Value.fromBigDecimal(value));
  }

  get xSushiAgeDestroyed(): BigDecimal {
    let value = this.get("xSushiAgeDestroyed");
    return value.toBigDecimal();
  }

  set xSushiAgeDestroyed(value: BigDecimal) {
    this.set("xSushiAgeDestroyed", Value.fromBigDecimal(value));
  }

  get users(): Array<string> {
    let value = this.get("users");
    return value.toStringArray();
  }

  set users(value: Array<string>) {
    this.set("users", Value.fromStringArray(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bar(): string | null {
    let value = this.get("bar");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bar(value: string | null) {
    if (value === null) {
      this.unset("bar");
    } else {
      this.set("bar", Value.fromString(value as string));
    }
  }

  get xSushi(): BigDecimal {
    let value = this.get("xSushi");
    return value.toBigDecimal();
  }

  set xSushi(value: BigDecimal) {
    this.set("xSushi", Value.fromBigDecimal(value));
  }

  get xSushiIn(): BigDecimal {
    let value = this.get("xSushiIn");
    return value.toBigDecimal();
  }

  set xSushiIn(value: BigDecimal) {
    this.set("xSushiIn", Value.fromBigDecimal(value));
  }

  get xSushiOut(): BigDecimal {
    let value = this.get("xSushiOut");
    return value.toBigDecimal();
  }

  set xSushiOut(value: BigDecimal) {
    this.set("xSushiOut", Value.fromBigDecimal(value));
  }

  get xSushiMinted(): BigDecimal {
    let value = this.get("xSushiMinted");
    return value.toBigDecimal();
  }

  set xSushiMinted(value: BigDecimal) {
    this.set("xSushiMinted", Value.fromBigDecimal(value));
  }

  get xSushiBurned(): BigDecimal {
    let value = this.get("xSushiBurned");
    return value.toBigDecimal();
  }

  set xSushiBurned(value: BigDecimal) {
    this.set("xSushiBurned", Value.fromBigDecimal(value));
  }

  get xSushiOffset(): BigDecimal {
    let value = this.get("xSushiOffset");
    return value.toBigDecimal();
  }

  set xSushiOffset(value: BigDecimal) {
    this.set("xSushiOffset", Value.fromBigDecimal(value));
  }

  get xSushiAge(): BigDecimal {
    let value = this.get("xSushiAge");
    return value.toBigDecimal();
  }

  set xSushiAge(value: BigDecimal) {
    this.set("xSushiAge", Value.fromBigDecimal(value));
  }

  get xSushiAgeDestroyed(): BigDecimal {
    let value = this.get("xSushiAgeDestroyed");
    return value.toBigDecimal();
  }

  set xSushiAgeDestroyed(value: BigDecimal) {
    this.set("xSushiAgeDestroyed", Value.fromBigDecimal(value));
  }

  get sushiStaked(): BigDecimal {
    let value = this.get("sushiStaked");
    return value.toBigDecimal();
  }

  set sushiStaked(value: BigDecimal) {
    this.set("sushiStaked", Value.fromBigDecimal(value));
  }

  get sushiStakedUSD(): BigDecimal {
    let value = this.get("sushiStakedUSD");
    return value.toBigDecimal();
  }

  set sushiStakedUSD(value: BigDecimal) {
    this.set("sushiStakedUSD", Value.fromBigDecimal(value));
  }

  get sushiHarvested(): BigDecimal {
    let value = this.get("sushiHarvested");
    return value.toBigDecimal();
  }

  set sushiHarvested(value: BigDecimal) {
    this.set("sushiHarvested", Value.fromBigDecimal(value));
  }

  get sushiHarvestedUSD(): BigDecimal {
    let value = this.get("sushiHarvestedUSD");
    return value.toBigDecimal();
  }

  set sushiHarvestedUSD(value: BigDecimal) {
    this.set("sushiHarvestedUSD", Value.fromBigDecimal(value));
  }

  get sushiOut(): BigDecimal {
    let value = this.get("sushiOut");
    return value.toBigDecimal();
  }

  set sushiOut(value: BigDecimal) {
    this.set("sushiOut", Value.fromBigDecimal(value));
  }

  get sushiIn(): BigDecimal {
    let value = this.get("sushiIn");
    return value.toBigDecimal();
  }

  set sushiIn(value: BigDecimal) {
    this.set("sushiIn", Value.fromBigDecimal(value));
  }

  get usdOut(): BigDecimal {
    let value = this.get("usdOut");
    return value.toBigDecimal();
  }

  set usdOut(value: BigDecimal) {
    this.set("usdOut", Value.fromBigDecimal(value));
  }

  get usdIn(): BigDecimal {
    let value = this.get("usdIn");
    return value.toBigDecimal();
  }

  set usdIn(value: BigDecimal) {
    this.set("usdIn", Value.fromBigDecimal(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get sushiOffset(): BigDecimal {
    let value = this.get("sushiOffset");
    return value.toBigDecimal();
  }

  set sushiOffset(value: BigDecimal) {
    this.set("sushiOffset", Value.fromBigDecimal(value));
  }

  get usdOffset(): BigDecimal {
    let value = this.get("usdOffset");
    return value.toBigDecimal();
  }

  set usdOffset(value: BigDecimal) {
    this.set("usdOffset", Value.fromBigDecimal(value));
  }
}

export class History extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save History entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save History entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("History", id.toString(), this);
  }

  static load(id: string): History | null {
    return store.get("History", id) as History | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get timeframe(): string {
    let value = this.get("timeframe");
    return value.toString();
  }

  set timeframe(value: string) {
    this.set("timeframe", Value.fromString(value));
  }

  get sushiStaked(): BigDecimal {
    let value = this.get("sushiStaked");
    return value.toBigDecimal();
  }

  set sushiStaked(value: BigDecimal) {
    this.set("sushiStaked", Value.fromBigDecimal(value));
  }

  get sushiStakedUSD(): BigDecimal {
    let value = this.get("sushiStakedUSD");
    return value.toBigDecimal();
  }

  set sushiStakedUSD(value: BigDecimal) {
    this.set("sushiStakedUSD", Value.fromBigDecimal(value));
  }

  get sushiHarvested(): BigDecimal {
    let value = this.get("sushiHarvested");
    return value.toBigDecimal();
  }

  set sushiHarvested(value: BigDecimal) {
    this.set("sushiHarvested", Value.fromBigDecimal(value));
  }

  get sushiHarvestedUSD(): BigDecimal {
    let value = this.get("sushiHarvestedUSD");
    return value.toBigDecimal();
  }

  set sushiHarvestedUSD(value: BigDecimal) {
    this.set("sushiHarvestedUSD", Value.fromBigDecimal(value));
  }

  get xSushiAge(): BigDecimal {
    let value = this.get("xSushiAge");
    return value.toBigDecimal();
  }

  set xSushiAge(value: BigDecimal) {
    this.set("xSushiAge", Value.fromBigDecimal(value));
  }

  get xSushiAgeDestroyed(): BigDecimal {
    let value = this.get("xSushiAgeDestroyed");
    return value.toBigDecimal();
  }

  set xSushiAgeDestroyed(value: BigDecimal) {
    this.set("xSushiAgeDestroyed", Value.fromBigDecimal(value));
  }

  get xSushiMinted(): BigDecimal {
    let value = this.get("xSushiMinted");
    return value.toBigDecimal();
  }

  set xSushiMinted(value: BigDecimal) {
    this.set("xSushiMinted", Value.fromBigDecimal(value));
  }

  get xSushiBurned(): BigDecimal {
    let value = this.get("xSushiBurned");
    return value.toBigDecimal();
  }

  set xSushiBurned(value: BigDecimal) {
    this.set("xSushiBurned", Value.fromBigDecimal(value));
  }

  get xSushiSupply(): BigDecimal {
    let value = this.get("xSushiSupply");
    return value.toBigDecimal();
  }

  set xSushiSupply(value: BigDecimal) {
    this.set("xSushiSupply", Value.fromBigDecimal(value));
  }

  get ratio(): BigDecimal {
    let value = this.get("ratio");
    return value.toBigDecimal();
  }

  set ratio(value: BigDecimal) {
    this.set("ratio", Value.fromBigDecimal(value));
  }
}
